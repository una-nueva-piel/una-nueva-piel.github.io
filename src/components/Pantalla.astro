---
import Offline from "./Offline.astro";
export interface Props {
    id: string;
    color: string;
    video: string;
}
const backendURL = "https://topical-platypus-partly.ngrok-free.app";
const { id, color, video } = Astro.props;
---

<script is:inline>
    function offline() {
        document.getElementById("main").innerHTML = `<div
    class="isolate max-w-prose h-full grid grid-cols-1 grid-rows-[auto_auto_1fr_auto]
			py-8 gap-4 px-6 bg-gradient-to-b from-zinc-900"
            id="offline-msg"
>
    <span class="font-bold text-5xl text-center text-slate-50">
        Una nueva piel
    </span>
    <span class="text-xl text-center italic text-slate-100">
        Desde el jueves 12 de junio en el Museo Evita - Palacio Ferreyra.
    </span>
    <div  class="text-xl text-center text-slate-100">
        (Si ves este mensaje frente a los televisores de la muestra, podés enviar un mail a miguel.pagano en el dominio @unc.edu.ar)
    </div>
    <a class="w-full" href="/interaccion">
        <div class="relative h-full w-3/4 mx-auto grid place-items-center">
        </div>
    </a>
    <a
        class="text-xl font-bold self-center justify-self-center text-slate-200"
        href="/"
    >
        Volver al inicio
    </a>
</div>`;
    }
</script>
<div
    id="main"
    x-data="{ pantalla: {}, cargando: true }"
    x-init={`() => fetch('${backendURL}/pantalla/${id}', { headers: { 'ngrok-skip-browser-warning': '69420' }})
                .then(resp => resp.json())
                .then(data => pantalla = data)
                .then(() => cargando = false)
                .catch((err) => offline())`}
    class="bg-zinc-900"
>
    <img
        class="fixed object-cover h-full opacity-25"
        id="video-pantalla"
       src={video} />

    <p x-show="cargando">Cargando...</p>
    <p x-cloak x-show="!cargando && !pantalla.manipulable">
        En este momento esta pantalla no está disponible
    </p>
    <div
        x-cloak
        x-show="!cargando && pantalla.manipulable"
        id="pantalla"
        data-id={id}
        data-url={backendURL}
        data-color={color}
        :data-pantalla="{pantalla}"
    >
    </div>
</div>
<script>
    import Konva from "konva";
    import { io } from "socket.io-client";

    const clamp = (num: number, min: number, max: number) =>
        Math.min(Math.max(num, min), max);

    function main() {
        const id = document.getElementById("pantalla")?.dataset?.id;
        const data = document.getElementById("pantalla")?.dataset?.pantalla;
        const color = document.getElementById("pantalla")?.dataset?.color;
        console.log("id: " + id + ". data: " + data);
        if (!id) {
            return;
        }
        const backendURL = document.getElementById("pantalla")?.dataset?.url!;

        if (data) {
            const ws = io(backendURL, {
                path: "/ws/",
                withCredentials: false,
                extraHeaders: { "ngrok-skip-browser-warning": "69420" },
            });
            ws.on("pantalla patched", ({ x, y }) => circle.x(x).y(y));
        }
        function patchCoordinate(x: number, y: number) {
            var json = {
                tipo: "float",
                x,
                y,
                nombre: "shift",
                duracion: -1,
            };

            fetch(`${backendURL}/pantalla/${id}`, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json",
                    "ngrok-skip-browser-warning": "69420",
                },
                body: JSON.stringify(json),
            }).catch((err) => console.log("Hubo un error" + err));
        }

        const stage = new Konva.Stage({
            container: "pantalla",
            width: window.innerWidth,
            height: window.innerHeight,
        });
        const circle = new Konva.Circle({
            x: window.innerWidth / 2,
            y: window.innerHeight / 2,
            radius: 8,
            fill: color,
            strokeWidth: 0,
            draggable: true,
        });

        const layer = new Konva.Layer();

        layer.add(circle);
        stage.add(layer);
        var animar = true;
        const period = 6000;

        const anim = new Konva.Animation(function (frame) {
            const scale =
                Math.abs(Math.sin((frame.time * 2 * Math.PI) / period)) + 1;
            if (animar) {
                circle.scale({ x: scale, y: scale });
            }
        }, layer);

        anim.start();

        circle.on("dragmove", (_) => {
            animar = false;
            circle
                .x(
                    clamp(
                        circle.x(),
                        circle.width() / 2,
                        window.innerWidth - circle.width(),
                    ),
                )
                .y(
                    clamp(
                        circle.y(),
                        circle.height() / 2,
                        window.innerHeight - circle.height(),
                    ),
                );
            patchCoordinate(circle.x(), circle.y());
        });
        circle.on("dragend", (_) => {
            animar = true;
        });
        circle.draw();
    }

    main();
</script>
